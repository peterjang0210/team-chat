{"version":3,"sources":["feathersClient.js","components/pages/Index.js","components/pages/Login.js","components/pages/Register.js","components/pages/CreateTeam.js","components/modals/CreateTeamModal.js","components/headers/TeamHeader.js","components/modals/CreateGroupModal.js","components/headers/GroupHeader.js","components/modals/InviteUserModal.js","components/headers/MemberHeader.js","components/headers/CustomerHeader.js","components/conversations/MessageBar.js","components/conversations/Message.js","components/conversations/MessageBoard.js","components/conversations/MessagePage.js","components/conversations/ConversationView.js","components/TeamListItem.js","components/pages/TeamPage.js","components/pages/Home.js","components/ProtectedRoute.js","App.js","serviceWorker.js","index.js"],"names":["feathers","require","socketio","io","auth","socket","feathersClient","configure","storage","window","localStorage","module","exports","fc","Index","react_default","a","createElement","react_router_dom","to","Login","state","email","password","error","handleInput","e","_this$setState","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","authenticate","strategy","catch","this","props","token","react_router","className","message","htmlFor","id","type","placeholder","required","onChange","onClick","React","Component","Register","loading","login","_callee","regenerator_default","wrap","_context","prev","next","service","create","then","res","stop","autoFocus","CreateTeam","modal","toggle","Container","Button","color","Modal","isOpen","ModalHeader","ModalBody","InputGroup","Input","teamName","teamNameInput","label","ModalFooter","teamCreate","CreateTeamModal","changeHandler","event","createTeam","ownerId","activeUser","_id","data","patch","$push","teamIds","teamId","userIds","concat","response","console","log","modalState","TeamHeader","dropdownOpen","teams","toggleModal","getTeams","prevProps","prevState","length","_this2","teamNames","_loop","i","find","team","push","_this3","ButtonDropdown","DropdownToggle","caret","DropdownMenu","map","DropdownItem","key","teamChange","modals_CreateTeamModal","CreateGroupModal","modalStatus","groupNameHandler","addGroup","GroupHeader","style","fontSize","modals_CreateGroupModal","assign","InviteUserModal","userEmail","emailChange","addMember","MemberHeader","modals_InviteUserModal","CustomerHeader","MessageBar","clickHandler","Bubble","justify","format","body","Message","convoType","Message_Bubble","MessageBoard","messages","conversations_Message","senderName","senderId","MessagePage","messageInput","conversationId","convoId","Fragment","conversations_MessageBoard","conversations_MessageBar","ConversationView","conversation","href","conversations_MessagePage","getMessages","TeamListItem","openConversation","status","activeUserId","preview","timestamps","TeamPage","teamMembers","groupConvos","memberConvos","customerConvos","messageView","activeConversation","activeConvoId","groupName","groupModal","userModal","unreadToUnreplied","userId","statusPath","updatedConvo","activeTeamId","sent","getMemberConvos","getGroupConvos","getCustomerConvos","_callee2","user","_context2","query","removeMyNameFromDisplayedMemberConvoName","abrupt","_callee3","_context3","_callee4","_context4","getTeamMembers","_callee5","_context5","getTeamName","_callee6","_context6","get","replace","createNewPersonalConversation_OnJoinTeam","_callee7","_context7","createNewMember2MemberConversations_OnJoinTeam","_callee8","_context8","addNewMemberToAllGroupConversations_OnJoinTeam","_callee9","_context9","initializeGroupConvoStatus_IfNeeded","_callee10","_context10","intializeMemberConvoStatus_IfNeeded","_callee11","_context11","initializeCustomerConvoStatus_IfNeeded","_callee12","_context12","getData","_callee13","_context13","updateStateForNewMessage","_callee14","convo","updatedMemberConvos","updatedGroupConvos","updatedCustomerConvos","_context14","toConsumableArray","updateStateForNewConvo","_callee15","_context15","updateMessagesForActiveConversation","_callee16","_context16","groupNameChange","member","_ref17","asyncToGenerator","mark","_callee17","newGroup","_context17","_x26","apply","arguments","toggleGroupModal","invitedEmails","toggleEmail","_callee18","_context18","currentTarget","on","headers_TeamHeader","headers_GroupHeader","components_TeamListItem","headers_MemberHeader","headers_CustomerHeader","conversations_ConversationView","Home","pages_TeamPage","pages_CreateTeam","ProtectedRoute","_ref","component","rest","objectWithoutProperties","render","pathname","from","location","App","teamInput","payload","invitation","invitingTeamId","passport","verifyJWT","_x","setUser","accessToken","path","exact","pages_Login","pages_Register","components_ProtectedRoute","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfa42a98.chunk.js","sourcesContent":["const feathers = require('@feathersjs/feathers');\nconst socketio = require('@feathersjs/socketio-client');\nconst io = require('socket.io-client');\nconst auth = require('@feathersjs/authentication-client');\n\n\nconst socket = io('https://teamchat-tepa.herokuapp.com:8080');\nconst feathersClient = feathers();\n\n// Set up Socket.io client with the socket\nfeathersClient.configure(socketio(socket));\n\nfeathersClient.configure(auth({\n  storage: window.localStorage\n}))\n\nmodule.exports = {\n  fc: feathersClient\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Index() {\n  return (\n    <div>\n      <h2>Index</h2>\n      <Link to=\"/login\">Login</Link>\n      <br />\n      <Link to=\"/register\">Register</Link>\n    </div>\n  )\n}\n\nexport default Index;\n","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport { fc } from '../../feathersClient';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    error: null,\n  }\n\n  /**\n   * @param {e} the event\n   *\n   * This function handles user input and sets state accordingly\n   * if there is an error, it will be cleared when user starts\n   * typing again.\n   */\n  handleInput = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n      error: null\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    fc.authenticate({\n      strategy: 'local',\n      email: this.state.email,\n      password: this.state.password,\n    })\n      .catch(error => {\n        this.setState({ error })\n      });\n  }\n\n  render() {\n    return (\n      this.props.token ? (\n        <Redirect to=\"/home\" />\n      ) : (\n          <div className=\"formContainer\">\n            <h1>Login</h1>\n            {this.state.error ? (<p>{this.state.error.message}</p>) : ''}\n            <form>\n              <div className=\"formRow\">\n                <label htmlFor=\"email\">Email</label>\n                <input className=\"formInput\" id=\"email\" name=\"email\" type=\"text\" placeholder=\"email\" required onChange={this.handleInput} />\n              </div>\n              <br></br>\n              <div className=\"formRow\">\n                <label htmlFor=\"password\">Password</label>\n                <input className=\"formInput\" id=\"password\" type=\"password\" name=\"password\" placeholder=\"password\" required onChange={this.handleInput} />\n              </div>\n              <br></br>\n              <div className=\"formRow\">\n                <button className=\"formBtn\" onClick={this.handleSubmit}>Login</button>\n              </div> \n            </form>\n            <Link to=\"/register\">new here? Register</Link>\n          </div>\n        )\n    )\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { fc } from \"../../feathersClient\";\n\nclass Register extends React.Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    loading: false,\n    error: null\n  };\n\n  handleInput = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  login = () => {\n    fc.authenticate({\n      strategy: \"local\",\n      email: this.state.email,\n      password: this.state.password\n    })\n    .catch(error => this.setState({ error }));\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n\n    fc.service(\"users\")\n      .create({\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n      })\n      .then(res => {\n        this.login();\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n  };\n\n  render() {\n    return this.props.token ? (\n      <Redirect to=\"/home\" />\n    ) : (\n        <div className=\"formContainer\">\n          <h1>Register</h1>\n          <form>\n            <div className=\"formRow\">\n              <label htmlFor=\"name\">Full Name</label>\n              <input\n                className=\"formInput\"\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"name\"\n                autoFocus\n                required\n                onChange={this.handleInput}\n              />\n            </div>\n            <br></br>\n            <div className=\"formRow\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className=\"formInput\"\n                id=\"email\"\n                name=\"email\"\n                type=\"text\"\n                placeholder=\"email\"\n                required\n                onChange={this.handleInput}\n              />\n            </div>\n            <br></br>\n            <div className=\"formRow\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className=\"formInput\"\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"password\"\n                required\n                onChange={this.handleInput}\n              />\n            </div>\n            <br></br>\n            <div className=\"formRow\">\n              <button className=\"formBtn\" onClick={this.handleSubmit}>Register</button>\n            </div>\n          </form>\n          <Link to=\"/login\">already member? Login</Link>\n        </div>\n      );\n  }\n}\n\nexport default Register;\n","import React, { Component } from \"react\";\nimport {\n  Container,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  InputGroup\n} from \"reactstrap\";\n\nclass CreateTeam extends Component {\n  state = {\n    modal: false\n  };\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  render() {\n    return (\n      <Container>\n        <h1>\n          Please feel free to create a team or wait until someone else adds you\n          to their team!\n        </h1>\n        <Button color=\"info\" onClick={this.toggle}>\n          Create Team\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>\n            Please Enter a Team Name\n          </ModalHeader>\n          <ModalBody>\n            <InputGroup>\n              <Input\n                value={this.props.teamName}\n                onChange={this.props.teamNameInput}\n                name=\"teamInput\"\n                type=\"text\"\n                label=\"Team Name\"\n              />\n            </InputGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.props.teamCreate}>\n              Create Team\n            </Button>\n            <Button color=\"secondary\" onClick={this.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </Container>\n    );\n  }\n}\n\nexport default CreateTeam;\n","import React from \"react\";\nimport { fc } from \"../../feathersClient\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  InputGroup\n} from \"reactstrap\";\n\nclass CreateTeamModal extends React.Component {\n  state = {\n    teamName: \"\"\n  };\n\n  changeHandler =(event) => {\n    this.setState({teamName: event.target.value});\n  }\n\n  createTeam = (e) => {\n    fc.service('teams').create({ // create the team given the input name and set the active user as owner\n        name: this.state.teamName,\n        ownerId: this.props.activeUser._id\n    })\n    .then((data) => {\n        fc.service(\"users\").patch(this.props.activeUser._id, {$push: { // add new team to this User and set activeTeam in db\n          teamIds: data._id\n        }}).then(() => { // create default General converation\n          fc.service(\"conversations\").create(\n            {\n              teamId: data._id,\n              type: \"group\",\n              name: \"General\",\n              userIds: this.props.activeUser._id\n            },\n          )\n          fc.service(\"conversations\").create(\n            {\n              teamId: data._id,\n              type: \"member\",\n              name: `${this.props.activeUser.name} (you)`,\n              userIds: this.props.activeUser._id\n            }\n          )\n        })\n        .then((response) => {\n          console.log(data);\n            this.props.toggle();\n        })\n    });\n}\n\n  render() {\n    return (\n      <div>\n        <Modal\n          isOpen={this.props.modalState}\n          toggle={this.props.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.props.toggle}>Create a New Team</ModalHeader>\n          <ModalBody>\n            <InputGroup>\n              <Input placeholder=\"Enter New Team Name\" value={this.state.teamName} onChange={this.changeHandler}/>\n            </InputGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.createTeam}>\n                Create Team\n            </Button>\n            <Button color=\"secondary\" onClick={this.props.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CreateTeamModal;\n","import React from 'react';\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem} from 'reactstrap';\nimport CreateTeamModal from \"../modals/CreateTeamModal\";\nimport { fc } from \"../../feathersClient\";\n\n/**\n * This is the header for the sidebar that allows the user to switch teams\n */\nclass TeamHeader extends React.Component {\n  state = {\n    dropdownOpen: false,\n    modal: false,\n    teams: []\n  };\n\n  componentDidMount(){\n    this.getTeams();\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.teams && this.state.teams.length !== prevState.teams.length){\n      console.log(\"update is running\");\n      this.getTeams();\n    }\n  }\n\n  getTeams(){\n    const teamNames = [];\n    for(let i = 0; i < this.props.activeUser.teamIds.length; i++){\n      fc.service(\"teams\").find(this.props.activeUser.teamIds[i])\n        .then(function(team){\n          console.log('teams this user is on', team);\n          teamNames.push(team.data[i]);\n        });\n    }\n    this.setState({teams: teamNames});\n  }\n\n  toggle = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen,\n    });\n  }\n\n  toggleModal = () => {\n    this.setState({modal: !this.state.modal});\n  }\n\n  render() {\n    const { dropdownOpen } = this.state;\n    const { teamName } = this.props;\n\n    return (\n      <div className=\"d-flex justify-content-center mb-4\">\n        <ButtonDropdown color=\"bg-white\" isOpen={dropdownOpen} toggle={this.toggle}>\n          <DropdownToggle caret>{ teamName }</DropdownToggle>\n          <DropdownMenu>\n            {this.state.teams && this.state.teams.map((team, i) => <DropdownItem key={i} onClick={this.props.teamChange} value={team._id}>{team.name}</DropdownItem>)}\n            <DropdownItem onClick={this.toggleModal}>Create Team</DropdownItem>\n          </DropdownMenu>\n        </ButtonDropdown>\n        <CreateTeamModal activeUser={this.props.activeUser} modalState={this.state.modal} toggle={this.toggleModal}/>\n      </div>\n    );\n  }\n}\n\nexport default TeamHeader;\n","import React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  InputGroup\n} from \"reactstrap\";\n\nconst CreateGroupModal = props => (\n  <div>\n    <Modal\n      isOpen={props.modalStatus}\n      toggle={props.toggle}\n      className={props.className}\n    >\n      <ModalHeader toggle={props.toggle}>Create a New Group</ModalHeader>\n      <ModalBody>\n        <InputGroup>\n          <Input\n            placeholder=\"Enter New Group Name\"\n            value={props.value}\n            onChange={props.groupNameHandler}\n          />\n        </InputGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={props.addGroup}>\n          Create Group\n        </Button>\n        <Button color=\"secondary\" onClick={props.toggle}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  </div>\n);\n\nexport default CreateGroupModal;\n","import React from \"react\";\nimport CreateGroupModal from \"../modals/CreateGroupModal\";\n\nclass GroupHeader extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"px-2 d-flex justify-content-between align-items-center\">\n          <h6 className=\"text-muted\">Groups</h6>\n          <button onClick={this.props.toggleModal} className=\"addBtn\">\n            <i className=\"material-icons\" style={{ fontSize: \"20px\", color: \"grey\" }}> add_circle_outline </i>\n          </button>\n        </div>\n        <CreateGroupModal toggle={this.props.toggleModal} {...this.props} />\n      </div>\n    );\n  }\n}\n\nexport default GroupHeader;\n","import React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  InputGroup\n} from \"reactstrap\";\n\nclass InviteUserModal extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <Modal\n          isOpen={this.props.modalStatus}\n          toggle={this.props.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.props.toggle}>Invite a New User</ModalHeader>\n          <ModalBody>\n            <InputGroup>\n              <Input placeholder=\"Enter their email address\" value={this.props.userEmail} onChange={this.props.emailChange}/>\n            </InputGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.props.addMember}>\n                Invite User\n            </Button>\n            <Button color=\"secondary\" onClick={this.props.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default InviteUserModal;\n","import React from \"react\";\nimport InviteUserModal from \"../modals/InviteUserModal\";\n\nfunction MemberHeader(props) {\n  return (\n    <div>\n      <div className=\"px-2 d-flex justify-content-between align-items-center\">\n        <h6 className=\"text-muted\">Members</h6>\n        <button onClick={props.toggleModal} className=\"addBtn\">\n          <i className=\"material-icons\" style={{ fontSize: \"20px\", color: \"grey\" }}>\n            add_circle_outline\n          </i>\n        </button>\n      </div>\n      <InviteUserModal toggle={props.toggleModal} {...props} />\n    </div>\n  );\n}\n\nexport default MemberHeader;\n","import React from 'react';\n\nconst CustomerHeader = props => {\n    return (\n      <div className=\"px-2 d-flex justify-content-between align-items-center\">\n        <h6 className=\"text-muted\">Customers</h6>\n        <button onClick={props.addGroup} className='addBtn'>\n          <i className='material-icons' style={{ fontSize: '20px', color: 'grey' }}>\n            add_circle_outline\n          </i>\n        </button>\n      </div>\n    );\n  };\n\nexport default CustomerHeader;","import React from \"react\";\n\nconst MessageBar = props => (\n  <form className=\"form-inline\">\n    <input className=\"\" onChange={props.changeHandler} value={props.value}/>\n    <button className=\"\" onClick={props.clickHandler}>Send</button>\n  </form>\n);\n\nexport default MessageBar;\n","import React from \"react\";\nimport { PromiseProvider } from \"mongoose\";\n\n\nconst Bubble = props => (\n  <div className={props.justify}>\n    <div className={\"card messageBubble text-white \" + props.format}>\n     <div className=\"card-body\">\n      <h5 className=\"card-title\">{props.name}</h5>\n      <p className=\"card-text\">{props.body}</p>\n     </div>\n    </div>\n  </div>\n);\n\n\nconst Message = props => (\n  props.convoType === \"incoming\" ? \n    (props.id ? \n      (<Bubble {...props} justify=\"row justify-content-end\" format=\"myMessage bg-primary\" />) : \n      (<Bubble {...props} justify=\"\" format=\"theirMessage bg-success\" />)) : \n    (props.id===props.activeUser._id ? \n      (<Bubble {...props} justify=\"row justify-content-end\" format=\"myMessage bg-primary\" />) : \n      (<Bubble {...props} justify=\"\" format=\"theirMessage bg-success\" />)) \n  );\n    \n\n\n\n\n\n\n\nexport default Message;\n","import React from \"react\";\nimport Message from './Message';\n\nconst MessageBoard = props => (\n  <div className=\"conversation-body\">\n    {props.messages &&\n      props.messages.map(message => \n        <Message \n          key={message._id} \n          convoType={props.convoType} \n          name={message.senderName} \n          body={message.body} \n          activeUser={props.activeUser} \n          id={message.senderId}/>)}\n  </div>\n);\n\nexport default MessageBoard;\n","import React from \"react\";\nimport MessageBar from './MessageBar';\nimport MessageBoard from './MessageBoard';\nimport { fc } from \"../../feathersClient\";\n\nclass MessagePage extends React.Component {\n  state = {\n    messageInput: \"\",\n  };\n\n  changeHandler = event => {\n    this.setState({ messageInput: event.target.value });\n  };\n\n  clickHandler = event => {\n    event.preventDefault();\n    console.log('this should be only once. in MessagePage')\n    fc.service(\"messages\")\n      .create({\n        body: this.state.messageInput,\n        senderId: this.props.activeUser._id,\n        senderName: this.props.activeUser.name,\n        conversationId: this.props.convoId\n      })\n      .then((data) => {\n        // this.props.getMessages();\n        this.setState({ messageInput: \"\" });\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MessageBoard convoType={this.props.convoType} messages={this.props.messages} activeUser={this.props.activeUser} />\n        <div className=\"px-4 border-top d-flex pb-4 bg-light conversation-view-footer fixed-bottom\">\n          <MessageBar\n            changeHandler={this.changeHandler}\n            clickHandler={this.clickHandler}\n            value={this.state.messageInput}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MessagePage;\n","import React from 'react';\nimport MessagePage from './MessagePage';\nimport { fc } from '../../feathersClient';\n\nclass ConversationView extends React.Component {\n  // state = {\n  //   conversation: null,\n  //   error: null\n  // }\n\n  // componentDidUpdate(prevProps) {\n  //   if (this.props.conversationId !== prevProps.conversationId) {\n  //     this.fetchMessages(this.props.conversationId);\n  //   }\n  // }\n\n  // fetchMessages = (id) => {\n  //   fc.service('conversations').get(id).then(response => {\n  //     const conversationData = response;\n  //     if(conversationData.type === \"member\" && conversationData.userIds.length > 1) {\n  //       conversationData.name = conversationData.name.replace(this.props.activeUser.name, \"\")\n  //     }\n  //     this.setState({ conversation: conversationData })\n  //   }).catch(err => {\n  //     this.setState({ error: err })\n  //   })\n  // }\n\n  render() {\n    // want convo.type, convo.name, convo.id, updateMessages\n    const { conversation } = this.props;\n\n    return conversation  ?\n      (<div className=\"col-8 pl-0\" id='conversation-view'>\n        <nav className=\"navbar navbar-light bg-light d-flex justify-content-center sticky-top\">\n          <span className=\"navbar-brand\" href=\"#\">{conversation.name}</span>\n        </nav>\n        <MessagePage convoType={conversation.type} getMessages={this.props.getMessages} convoId={this.props.conversationId} activeUser={this.props.activeUser} messages={this.props.messages}/>\n      </div>)\n      :\n      (<div>Click on a convo to view</div>);\n  }\n}\n\nexport default ConversationView;\n","import React from 'react';\n\n\n// props.status[props.activeUserId]  {props.status[props.activeUserId] + \nconst TeamListItem = props => {\n  return (\n    <div className=\"border border-right-0\" id={props._id} onClick={props.openConversation}>\n      <i className= {props.status[props.activeUserId] +' material-icons notifyDot'} style={{ fontSize: '20px' }}>\n        fiber_manual_record\n      </i>\n      <h5 className='listName'>{props.name}</h5>\n      <div className='previewText'>{props.preview}</div>\n      <div className='elapsedTime'>{props.timestamps}</div>\n    </div>\n  );\n};\n\nexport default TeamListItem;\n","import React from 'react';\nimport { fc } from '../../feathersClient';\nimport TeamHeader from '../headers/TeamHeader';\nimport GroupHeader from '../headers/GroupHeader';\nimport MemberHeader from '../headers/MemberHeader';\nimport CustomerHeader from \"../headers/CustomerHeader\";\nimport ConversationView from '../conversations/ConversationView';\nimport TeamListItem from '../TeamListItem';\n\n// this.props =  activeTeamId, activeUser,  teamCreate, teamNameInput, teamName, {...props}\nclass TeamPage extends React.Component {\n  state = {\n    messages: [],\n    teamMembers: [],\n    teamName: '',\n    groupConvos: [],\n    memberConvos: [],\n    customerConvos: [],\n    messageView: false,\n    activeConversation: {},\n    activeConvoId: '',\n    groupName: \"\",\n    groupModal: false,\n    userEmail: \"\",\n    userModal: false,\n  };\n\n  // When a conversation is opened change unread to unreplied. \n  unreadToUnreplied = async () => {\n    const teamId = this.state.activeTeamId;\n    const userId = this.props.activeUser._id;\n    // update db \n    let statusPath = `status.${userId}`;\n    console.log('status path check should be status.sdlfawoiecwpo', statusPath)\n    console.log('activeConvo status',this.state.activeConversation.status)\n    if (this.state.activeConversation.status[userId] === \"unread\") {\n      const updatedConvo = await fc.service('conversations').patch(this.state.activeConvoId, { [statusPath] : \"unreplied\"})\n    // update state with new convos from db \n    console.log('updatedconvo status', updatedConvo.status)\n    const type = updatedConvo.type;\n    if (type===\"member\") {const memberConvos = await this.getMemberConvos(teamId, this.props.activeUser); await this.setState({memberConvos})}\n    else if (type===\"group\") {const groupConvos = await this.getGroupConvos(teamId, this.props.activeUser); console.log('group conversations', groupConvos); await this.setState({groupConvos})}\n    else if (type===\"incoming\") {const customerConvos = await this.getCustomerConvos(teamId, this.props.activeUser); await this.setState({customerConvos})}\n    }\n  } // done\n  getMemberConvos = async (teamId, user) => { \n    let memberConvos = await fc.service('conversations').find({query: {teamId: teamId, userIds: user._id, type: \"member\"}});\n    memberConvos = this.removeMyNameFromDisplayedMemberConvoName(memberConvos, user);\n    return memberConvos.data;\n  } // done\n  getGroupConvos = async (teamId, user) => { \n    const groupConvos = await fc.service('conversations').find({query: {teamId: teamId, userIds: user._id, type: \"group\"}});\n    return groupConvos.data;\n  } // done\n  getCustomerConvos = async (teamId, user) => {\n    const customerConvos = await fc.service('conversations').find({query: {teamId: teamId, userIds: user._id, type: \"incoming\"}});\n    return customerConvos.data;\n  } // done\n  getTeamMembers = async (teamId) => {\n    const teamMembers = await fc.service('users').find({query: {teamIds: teamId}});\n    return teamMembers.data;\n  } // done\n  getTeamName = async (teamId) => {\n    const team = await fc.service('teams').get(teamId);\n    return team.name;\n  } // done\n  removeMyNameFromDisplayedMemberConvoName = (memberConvos,user) => {\n    for (let i=1; i<memberConvos.length; i++) {\n      memberConvos[i].name = memberConvos[i].name.replace(user.name, \"\")\n    }\n    return memberConvos\n  } // done\n  createNewPersonalConversation_OnJoinTeam = async (teamId, user) => {\n    const myConvo = await fc.service('conversations').create({teamId: teamId, type: \"member\", name: user.name + \" (you)\", userIds: user._id});\n  } // done\n  createNewMember2MemberConversations_OnJoinTeam = async (teamMembers, teamId, user) => {\n    for (let i = 0; i < teamMembers.length; i++) {\n      if (user._id !== teamMembers[i]._id) {\n        const convo = await fc.service('conversations').create({\n          name: user.name + ' ' + teamMembers[i].name,\n          userIds: [user._id, teamMembers[i]._id],\n          type: 'member',\n          teamId: teamId\n        });\n      }\n    }\n  } // done\n  addNewMemberToAllGroupConversations_OnJoinTeam = async (teamId, user) => {\n    return await fc.service('conversations').patch(null, {$push: {userIds: user._id}}, {query: {teamId: teamId, type: \"group\"}});\n  } // done\n  initializeGroupConvoStatus_IfNeeded = async (groupConvos, user) => {\n    for (let i = 0; i<groupConvos.length; i++) {\n      if (!groupConvos[i].status) {\n        groupConvos[i].status = {};\n      }\n      if (!groupConvos[i].status[user._id]) {\n        groupConvos[i].status[user._id] = \"replied\"\n        const groupConvo = await fc.service('conversations').patch(groupConvos[i]._id, {status: {[user._id]: \"replied\" }})\n      }\n    }\n    return groupConvos;\n  } // done\n  intializeMemberConvoStatus_IfNeeded = async (memberConvos, user) => {\n    for (let i = 0; i<memberConvos.length; i++) {\n      if (!memberConvos[i].status) {\n        memberConvos[i].status = {};\n      }\n      if (!memberConvos[i].status[user._id]) {\n        memberConvos[i].status[user._id] = \"replied\"\n        await fc.service('conversations').patch(memberConvos[i]._id, {status: {[user._id]: \"replied\" }})\n      }\n    }\n    return memberConvos;\n  } // done\n  initializeCustomerConvoStatus_IfNeeded = async (customerConvos, user) => {\n    for (let i = 0; i<customerConvos.length; i++) {\n      if (!customerConvos[i].status) {\n        customerConvos[i].status = {};\n      }\n      if (!customerConvos[i].status[user._id]) {\n        customerConvos[i].status[user._id] = \"replied\"\n        await fc.service('conversations').patch(customerConvos[i]._id, {status: {[user._id]: \"replied\" }})\n      }\n    }\n    return customerConvos\n  } // done\n\n\n  getData = async (teamId, user) => {\n    const teamName = await this.getTeamName(teamId);\n    let teamMembers = await this.getTeamMembers(teamId);\n    let groupConvos = await this.getGroupConvos(teamId, user);\n    let memberConvos = await this.getMemberConvos(teamId, user);\n    let customerConvos = await this.getCustomerConvos(teamId, user);\n\n    // upon first login to a team: create the member to member threads between the new member and all other members\n    if (memberConvos.length === 0) {\n      await this.createNewPersonalConversation_OnJoinTeam(teamId, user);\n      await this.createNewMember2MemberConversations_OnJoinTeam(teamMembers, teamId, user);\n      memberConvos = await this.getMemberConvos(teamId, user._id);\n    }\n    if (groupConvos.length === 0) {\n      groupConvos = await this.addNewMemberToAllGroupConversations_OnJoinTeam(teamId, user);\n    }\n\n    // if the status doesn't exist yet set the default status for activeUser on the convo to replied\n    groupConvos = await this.initializeGroupConvoStatus_IfNeeded(groupConvos, user);\n    memberConvos = await this.intializeMemberConvoStatus_IfNeeded(memberConvos, user);\n    customerConvos = await this.initializeCustomerConvoStatus_IfNeeded(customerConvos, user);\n\n    this.setState({\n      teamMembers: teamMembers,\n      teamName: teamName,\n      groupConvos: groupConvos,\n      memberConvos: memberConvos,\n      customerConvos: customerConvos.data || []\n    });\n  } // done\n  updateStateForNewMessage = async (message) => {\n    // pull convos for this message type and update state\n    const convo = await fc.service('conversations').get(message.conversationId);\n    const convoType = convo.type;\n    if (convoType === \"member\") { const updatedMemberConvos = await this.getMemberConvos(this.props.activeTeamId, this.props.activeUser); this.setState({memberConvos: updatedMemberConvos})}\n    else if (convoType === \"group\") { const updatedGroupConvos = await this.getGroupConvos(this.props.activeTeamId, this.props.activeUser); this.setState({groupConvos: updatedGroupConvos})}\n    else if ( convoType === \"incoming\") {const updatedCustomerConvos = await this.getCustomerConvos(this.props.activeTeamId, this.props.activeUser); this.setState({customerConvos: updatedCustomerConvos})}\n    // if convo is current convo then get messages and update state\n    if (this.state.activeConvoId === message.conversationId) {\n      await this.setState({messages: [...this.state.messages, message]})\n    }\n  } // done\n  updateStateForNewConvo = async convo => {\n    const convoType = convo.type;\n    if (convoType === \"member\") { const updatedMemberConvos = await this.getMemberConvos(this.props.activeTeamId, this.props.activeUser); this.setState({memberConvos: updatedMemberConvos})}\n    else if (convoType === \"group\") { const updatedGroupConvos = await this.getGroupConvos(this.props.activeTeamId, this.props.activeUser); this.setState({groupConvos: updatedGroupConvos})}\n    else if ( convoType === \"incoming\") { const updatedCustomerConvos = await this.getCustomerConvos(this.props.activeTeamId, this.props.activeUser); this.setState({customerConvos: updatedCustomerConvos})}\n  } // done\n\n  updateMessagesForActiveConversation = async () => {\n    const messages = await fc.service(\"messages\").find({ query: { conversationId: this.state.activeConvoId } })\n    await this.setState({ messages: messages.data });\n  }; // done\n  \n\n  componentDidMount() {\n    this.getData(this.props.activeTeamId, this.props.activeUser);\n\n    // Listen to created conversation and add the new convo in real-time\n    fc.service('conversations').on('created', this.updateStateForNewConvo);\n    // listen for new messages, then run updateStateForNewMessages\n    fc.service('messages').on('created', this.updateStateForNewMessage);\n  } // done\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.activeUser !== this.props.activeUser ||\n      prevProps.activeTeamId !== this.props.activeTeamId ||\n      prevState.teamMembers.length !== this.state.teamMembers.length\n    ) {\n      this.getData(this.props.activeTeamId, this.props.activeUser);\n    }\n    // if activeConvoId changes then run get messages to update state\n    if (this.state.activeConvoId !== prevState.activeConvoId) {\n      this.updateMessagesForActiveConversation();\n      this.unreadToUnreplied();\n    }\n  }\n\n  groupNameChange = (event) => {\n    this.setState({ groupName: event.target.value });\n  }\n\n  addGroup = (e) => {\n    e.preventDefault();\n    fc.service('conversations')\n      .create({\n        name: this.state.groupName,\n        type: 'group',\n        teamId: this.props.activeTeamId,\n        status: {[this.props.activeUser._id]: \"replied\" },\n        userIds: this.state.teamMembers.map(member => member._id)\n      })\n      .then(async newGroup => {\n        // console.log('this.props', this.props.activeUser.name);\n        const groupConvos = await fc\n          .service('conversations')\n          .find({\n            query: {\n              teamId: this.props.activeTeamId,\n              userId: this.props.activeUser._id,\n              type: 'group',\n            },\n          });\n        // console.log('group convos add group', groupConvos.data)\n        this.setState({\n          groupConvos: groupConvos.data,\n          groupModal: false\n        });\n      });\n  }\n\n  toggleGroupModal = (event) => {\n    event.preventDefault();\n    this.setState({ groupModal: !this.state.groupModal });\n  }\n  // on addMember() click, prompt for invitee email address, and add the email to invitedEmails array on team (to be checked later on registration)\n  addMember = e => {\n    e.preventDefault();\n    // console.log(\"add member button clicked\")\n    fc.service('teams').patch(this.props.activeTeamId, { $push: { invitedEmails: this.state.userEmail } });\n    this.setState({ userModal: false });\n  }\n\n  emailChange = (event) => {\n    this.setState({ userEmail: event.target.value });\n  }\n\n  toggleEmail = (event) => {\n    event.preventDefault();\n    this.setState({ userModal: !this.state.userModal });\n  }\n\n  // when a conversation is clicked, open it up in ConversationPage ?\n  openConversation = async e => {\n    e.preventDefault();\n    const convoId = e.currentTarget.id;\n    const convo = await fc.service('conversations').get(convoId)\n    this.setState({ activeConvoId: convoId, activeConversation: convo });\n  }\n\n\n  render() {\n    return (\n      <div className=\"row\" id=\"team-page\" >\n        <div className=\"col-4 flex-column justify-content-center pt-5 pr-0 border-right\">\n          <TeamHeader teamName={this.state.teamName} activeUser={this.props.activeUser} teamChange={this.props.teamChange} />\n          <GroupHeader addGroup={this.addGroup} value={this.state.groupName} modalStatus={this.state.groupModal} groupNameHandler={this.groupNameChange} toggleModal={this.toggleGroupModal} {...this.props} />\n          {this.state.groupConvos.length > 0 ? (\n            this.state.groupConvos.map(convo => <TeamListItem key={convo._id} activeUserId={this.props.activeUser._id}  openConversation={this.openConversation} status={convo.status} {...convo} />\n            )\n          ) : (<h6 className='listItem'>No Group Conversations Exist</h6>)\n          }\n          <MemberHeader addMember={this.addMember} modalStatus={this.state.userModal} emailChange={this.emailChange} value={this.state.userEmail} {...this.props} toggleModal={this.toggleEmail} />\n          {this.state.memberConvos.length > 0 ? (\n            this.state.memberConvos.map(convo => (\n              <TeamListItem key={convo._id}  activeUserId={this.props.activeUser._id}  openConversation={this.openConversation} status={convo.status} {...convo} />\n            ))\n          ) : (\n              <h3 className='listItem'>No Member Conversations Exist</h3>\n            )}\n          <CustomerHeader addMember={this.addMember} {...this.props} />\n          {this.state.customerConvos.length > 0 ? (\n            this.state.customerConvos.map(convo => <TeamListItem key={convo._id} activeUserId={this.props.activeUser._id} openConversation={this.openConversation} status={convo.status} {...convo} />\n            )\n          ) : (<h6 className=\"listItem\">No Customer Conversations Exist</h6>)\n          }\n        </div>\n        <ConversationView getMessages={this.updateMessagesForActiveConversation} messages={this.state.messages} activeUser={this.props.activeUser} conversationId={this.state.activeConvoId} conversation={this.state.activeConversation} />\n      </div>\n    );\n  }\n}\n\nexport default TeamPage;\n","import React from 'react';\nimport CreateTeam from './CreateTeam'\nimport TeamPage from './TeamPage'\n\nfunction Home(props) {\n  return (\n    <div>\n      {props.activeTeamId ?\n        <TeamPage {...props}/> :\n        <CreateTeam teamCreate={props.teamCreate} teamNameInput={props.teamNameInput}/>}\n    </div>\n  )\n\n}\n\nexport default Home;\n\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nfunction ProtectedRoute({ component: Component, token, activeTeamId, activeUser, teamNameInput, teamCreate, teamChange, teamName, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        token ? (\n          <Component activeTeamId={activeTeamId} activeUser={activeUser} teamCreate={teamCreate} teamNameInput={teamNameInput} teamChange={teamChange} teamName={teamName} {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/register\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default ProtectedRoute\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Index from './components/pages/Index';\nimport Login from './components/pages/Login';\nimport Register from './components/pages/Register';\nimport Home from './components/pages/Home';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport { fc } from './feathersClient';\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    token: false,\n    activeUser: {},\n    activeTeamId: \"\",\n    teamInput: \"\"\n  }\n\n  componentDidMount() {\n    /**\n     * Check localStorage for a jwt token and attempt to authenticate the\n     * token. If the token fails to pass authentication, then don't\n     * do anything (fail silently).\n     */\n    fc.authenticate().catch(() => {});\n    // On successful login\n    fc.on('authenticated', response => {\n      const setUser = async (token) => {\n        const payload = await fc.passport.verifyJWT(token)\n        let user = await fc.service('users').get(payload.userId)\n        const invitation = await fc.service('teams').find({query: {invitedEmails: user.email}}) // only works for 1 invitation at a time right now\n        if (invitation.data.length === 1) {\n          const invitingTeamId = invitation.data[0]._id;\n          const activeTeamId = invitingTeamId;\n          user = await fc.service('users').patch(user, {teamIds: invitingTeamId, activeTeamId: activeTeamId})\n        }\n\n        this.setState({\n          token: token,\n          activeUser: user,\n          activeTeamId: user.activeTeamId\n        })\n      }\n      setUser(response.accessToken)\n    })\n\n      // Listen for when the user logs out\n      fc.on('logout', response => {\n        this.setState({\n          token: null,\n        })\n      })\n    }\n  \n    teamChange = (event) => {\n      event.preventDefault();\n      fc.service(\"users\").patch(this.state.activeUser, {activeTeamId: event.target.value});\n      this.setState({activeTeamId: event.target.value});\n    }\n\n\n  teamNameInput = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n      error: null\n    })\n  }\n  teamCreate = (e) => {\n      fc.service('teams').create({ // create the team given the input name and set the active user as owner\n          name: this.state.teamInput,\n          ownerId: this.state.activeUser._id\n      })\n      .then((data) => {\n          fc.service(\"users\").patch(this.state.activeUser._id, { // add new team to this User and set activeTeam in db\n            teamIds: data._id,\n            activeTeamId: data._id\n          }).then(() => { // create default General converation\n            fc.service(\"conversations\").create(\n              {\n                teamId: data._id,\n                type: \"group\",\n                name: \"General\",\n                userIds: this.state.activeUser._id\n              },\n            )\n            fc.service(\"conversations\").create(\n              {\n                teamId: data._id,\n                type: \"member\",\n                name: `${this.state.activeUser.name} (you)`,\n                userIds: this.state.activeUser._id\n              }\n            )\n          })\n          .then((response) => { // set the activeTeamId to the new team\n            this.setState({activeTeamId: data._id});\n          })\n      });\n  }\n\n\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/login\" exact render={props => <Login token={this.state.token} {...props} />} />\n        <Route path=\"/register\" exact render={props => <Register token={this.state.token} {...props} />} />\n        <ProtectedRoute path=\"/home\" exact token={this.state.token} activeTeamId={this.state.activeTeamId} activeUser={this.state.activeUser} teamNameInput={this.teamNameInput} teamCreate={this.teamCreate} teamName={this.state.teamInput} teamChange={this.teamChange} component={Home} />\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n// import 'bootstrap-css-only/css/bootstrap.min.css';\n// import 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}